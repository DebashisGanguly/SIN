% Copyright (C) Debashis Ganguly - All Rights Reserved
% Project: Detecting Sexual Innuendos behind Images
% Purpose: Extract Amazon MTurk labels from MTurk HIT CSV
% Author: Debashis Ganguly
% Email: debashis@cs.pitt.edu
% Date: April 2016


%% Import data from text file.
% Script for importing data from the following text file:
%
%    download.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/04/04 20:27:50

%% Initialize variables.
filename = 'download.csv';
delimiter = ',';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[6,8,9,10,11,24,29,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [6,8,9,10,11,24,29,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47]);
rawCellColumns = raw(:, [1,2,3,4,5,7,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,30,40,48,49]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
download = table;
download.HITId = rawCellColumns(:, 1);
download.HITTypeId = rawCellColumns(:, 2);
download.Title = rawCellColumns(:, 3);
download.Description = rawCellColumns(:, 4);
download.Keywords = rawCellColumns(:, 5);
download.Reward = cell2mat(rawNumericColumns(:, 1));
download.CreationTime = rawCellColumns(:, 6);
download.MaxAssignments = cell2mat(rawNumericColumns(:, 2));
download.RequesterAnnotation = cell2mat(rawNumericColumns(:, 3));
download.AssignmentDurationInSeconds = cell2mat(rawNumericColumns(:, 4));
download.AutoApprovalDelayInSeconds = cell2mat(rawNumericColumns(:, 5));
download.Expiration = rawCellColumns(:, 7);
download.NumberOfSimilarHITs = rawCellColumns(:, 8);
download.LifetimeInSeconds = rawCellColumns(:, 9);
download.AssignmentId = rawCellColumns(:, 10);
download.WorkerId = rawCellColumns(:, 11);
download.AssignmentStatus = rawCellColumns(:, 12);
download.AcceptTime = rawCellColumns(:, 13);
download.SubmitTime = rawCellColumns(:, 14);
download.AutoApprovalTime = rawCellColumns(:, 15);
download.ApprovalTime = rawCellColumns(:, 16);
download.RejectionTime = rawCellColumns(:, 17);
download.RequesterFeedback = rawCellColumns(:, 18);
download.WorkTimeInSeconds = cell2mat(rawNumericColumns(:, 6));
download.LifetimeApprovalRate = rawCellColumns(:, 19);
download.Last30DaysApprovalRate = rawCellColumns(:, 20);
download.Last7DaysApprovalRate = rawCellColumns(:, 21);
download.Inputimage_url = rawCellColumns(:, 22);
download.AnswerQ1 = cell2mat(rawNumericColumns(:, 7));
download.AnswerQ10 = rawCellColumns(:, 23);
download.AnswerQ11 = cell2mat(rawNumericColumns(:, 8));
download.AnswerQ12 = cell2mat(rawNumericColumns(:, 9));
download.AnswerQ13 = cell2mat(rawNumericColumns(:, 10));
download.AnswerQ14 = cell2mat(rawNumericColumns(:, 11));
download.AnswerQ15 = cell2mat(rawNumericColumns(:, 12));
download.AnswerQ16 = cell2mat(rawNumericColumns(:, 13));
download.AnswerQ17 = cell2mat(rawNumericColumns(:, 14));
download.AnswerQ18 = cell2mat(rawNumericColumns(:, 15));
download.AnswerQ19 = cell2mat(rawNumericColumns(:, 16));
download.AnswerQ2 = rawCellColumns(:, 24);
download.AnswerQ3 = cell2mat(rawNumericColumns(:, 17));
download.AnswerQ4 = cell2mat(rawNumericColumns(:, 18));
download.AnswerQ5 = cell2mat(rawNumericColumns(:, 19));
download.AnswerQ6 = cell2mat(rawNumericColumns(:, 20));
download.AnswerQ7 = cell2mat(rawNumericColumns(:, 21));
download.AnswerQ8 = cell2mat(rawNumericColumns(:, 22));
download.AnswerQ9 = cell2mat(rawNumericColumns(:, 23));
download.Approve = rawCellColumns(:, 25);
download.Reject = rawCellColumns(:, 26);

%% Filter only approved rows
filteredData = download(strcmp(download.AssignmentStatus, 'Approved'),:);

%% Filter required columns
filteredData = filteredData(:, {'Inputimage_url' 'AnswerQ1' 'AnswerQ2' 'AnswerQ3' 'AnswerQ4' 'AnswerQ5' 'AnswerQ6' 'AnswerQ7' 'AnswerQ8' 'AnswerQ9' 'AnswerQ10' 'AnswerQ11' 'AnswerQ12' 'AnswerQ13' 'AnswerQ14' 'AnswerQ15' 'AnswerQ16' 'AnswerQ17' 'AnswerQ18' 'AnswerQ19'});

%% Further process column data
imageName = [];

paRaw = zeros(size(filteredData, 1), 5);
paIndices = cellfun(@(s) str2num(char(strsplit(s, '|'))), filteredData.AnswerQ2, 'uni', 0);

q10Raw = cellfun(@(s) sum(str2num(char(strsplit(s, '|')))), filteredData.AnswerQ10, 'uni', 0);

for i = 1:size(filteredData, 1)
    [~, imageName{i}, ~] = fileparts(filteredData.Inputimage_url{i});
    paRaw(i, paIndices{i}) = 1;
end

imageName = imageName';

globalClasses = table;
globalClasses.Image = imageName;
globalClasses.F1 = filteredData.AnswerQ1;

globalClasses = grpstats(globalClasses, 'Image', @(s) mode(s));
globalClasses = globalClasses(:, {'Image' 'Fun1_F1'});
globalClasses = sortrows(globalClasses, 'Image');

personalityAttributes = table;
personalityAttributes.Image = imageName;
personalityAttributes.F1 = paRaw(:, 1);
personalityAttributes.F2 = paRaw(:, 2);
personalityAttributes.F3 = paRaw(:, 3);
personalityAttributes.F4 = paRaw(:, 4);
personalityAttributes.F5 = paRaw(:, 5);

personalityAttributes = grpstats(personalityAttributes, 'Image', @(s) mode(s));
personalityAttributes = personalityAttributes(:, {'Image' 'Fun1_F1' 'Fun1_F2' 'Fun1_F3' 'Fun1_F4' 'Fun1_F5'});
personalityAttributes = sortrows(personalityAttributes, 'Image');

synatcticalAttributes = table;
synatcticalAttributes.Image = imageName;
synatcticalAttributes.F1 = filteredData.AnswerQ3;
synatcticalAttributes.F2 = filteredData.AnswerQ4;
synatcticalAttributes.F3 = filteredData.AnswerQ5;
synatcticalAttributes.F4 = filteredData.AnswerQ6;
synatcticalAttributes.F5 = filteredData.AnswerQ7;
synatcticalAttributes.F6 = filteredData.AnswerQ8;
synatcticalAttributes.F7 = filteredData.AnswerQ9;
synatcticalAttributes.F8 = cell2mat(q10Raw);
synatcticalAttributes.F9 = filteredData.AnswerQ11;
synatcticalAttributes.F10 = filteredData.AnswerQ12;
synatcticalAttributes.F11 = filteredData.AnswerQ13;
synatcticalAttributes.F12 = filteredData.AnswerQ14;
synatcticalAttributes.F13 = filteredData.AnswerQ15;
synatcticalAttributes.F14 = filteredData.AnswerQ16;
synatcticalAttributes.F15 = filteredData.AnswerQ17;
synatcticalAttributes.F16 = filteredData.AnswerQ18;
synatcticalAttributes.F17 = filteredData.AnswerQ19;

synatcticalAttributes = grpstats(synatcticalAttributes, 'Image', @(s) mode(s));
synatcticalAttributes = synatcticalAttributes(:, {'Image' 'Fun1_F1' 'Fun1_F2' 'Fun1_F3' 'Fun1_F4' 'Fun1_F5' 'Fun1_F6' 'Fun1_F7' 'Fun1_F8' 'Fun1_F9' 'Fun1_F10' 'Fun1_F11' 'Fun1_F12' 'Fun1_F13' 'Fun1_F14' 'Fun1_F15' 'Fun1_F16' 'Fun1_F17'});
synatcticalAttributes = sortrows(synatcticalAttributes, 'Image');

writetable(globalClasses, 'GlobalClasses.csv', 'WriteVariableNames', false, 'Delimiter', ',');
writetable(personalityAttributes, 'PersonalityAttributes.csv', 'WriteVariableNames', false, 'Delimiter', ',');
writetable(synatcticalAttributes, 'SynatcticalAttributes.csv', 'WriteVariableNames', false, 'Delimiter', ',');

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R download i paRaw paIndices imageName q10Raw;
